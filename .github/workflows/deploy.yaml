name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-update:
    runs-on: ubuntu-latest
    environment: Develop

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print username
        run: 'echo "Registry username: ${{ secrets.REGISTRY_USERNAME }}"'
          
      # Paso 1: Clonar frappe_docker
      - name: Checkout frappe_docker
        uses: actions/checkout@v2
        with:
          repository: frappe/frappe_docker
          path: frappe_docker

      # Paso 2: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Paso 3: Login en el registry Docker
      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Paso 4: Build y Push de la imagen Docker
      - name: Calculate Image Tag
        id: tag
        run: |
          # Obtén el último tag de la rama (si no hay, usa "0.0.0")
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
          
          # Extraer las partes del tag
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_TAG"
          
          # Incrementar el PATCH
          PATCH=$((PATCH + 1))
          
          # Crear un nuevo tag basado en el incremento
          NEW_TAG="$MAJOR.$MINOR.$PATCH"

      
          # Obtener el SHA corto del commit actual
          COMMIT_SHA=$(git rev-parse --short HEAD)
          
          # Crear el tag completo combinando NEW_TAG y COMMIT_SHA
          FULL_TAG="${NEW_TAG}-${COMMIT_SHA}"
          
          # Exportar los tags
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "FULL_TAG=$FULL_TAG" >> $GITHUB_ENV
          
          echo "Previous tag: $LAST_TAG"
          echo "New semantic tag: $NEW_TAG"
          echo "Full tag with commit: $FULL_TAG"

      - name: Verify APPS_JSON
        env:
          APPS_JSON_BASE64: ${{ secrets.APPS_JSON_BASE64 }}
        run: |
          echo "Verificando formato del JSON..."
          echo "$APPS_JSON_BASE64" | base64 -d > apps.json
          cat apps.json
          echo "Validando JSON..."
          jq . apps.json

      - name: Build and Push Docker Image
        env:
          APPS_JSON_BASE64: ${{ secrets.APPS_JSON_BASE64 }}
        run: |
          # Verificar que tenemos el valor
          echo "Apps JSON length: ${#APPS_JSON_BASE64}"
          
          # Hacer el build usando la variable de ambiente
          docker build \
            --build-arg FRAPPE_PATH=https://github.com/frappe/frappe \
            --build-arg FRAPPE_BRANCH=version-15 \
            --build-arg APPS_JSON_BASE64="${APPS_JSON_BASE64}" \
            --tag docker.io/mabecenter/erpnext:${{ env.FULL_TAG }} \
            --file frappe_docker/images/layered/Containerfile .
          
          # Push de la imagen
          docker push docker.io/mabecenter/erpnext:${{ env.FULL_TAG }}
      
      # Paso 5: Recrear el archivo values.yaml desde el secreto

      - name: Reconstruct values.yaml from Secret
        run: |
          echo "${{ secrets.VALUES_YAML }}" > values.yaml

      # Paso 6: Actualizar el values.yaml con el nuevo tag
      - name: Update values.yaml
        run: |
          sed -i "s/^  tag: .*$/  tag: ${{ env.FULL_TAG }}/" values.yaml

      # Paso 7: Clonar el repositorio de infra/helm
      - name: Checkout Infra Repo
        uses: actions/checkout@v2
        with:
          repository: mabecenter-it/helm
          ref: main
          path: helm
          token: ${{ secrets.GH_PAT }}

      # Paso 8: Reemplazar el values.yaml en el repositorio clonado
      - name: Replace values.yaml in infra Repo
        run: |
          mv values.yaml helm/erpnext/custom_values.yaml

      # Paso 9: Commit y push del nuevo archivo
      - name: Commit and Push Changes
        run: |
          cd helm
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Configurar el token para el push
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/mabecenter-it/helm.git
          git add erpnext/custom_values.yaml
          git commit -m "Update Docker image to ${{ env.FULL_TAG }}"
          git push origin main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

permissions:
  contents: read
  packages: write
